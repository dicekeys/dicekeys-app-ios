// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ImageProcessor.djinni

#include "NativeImageProcessor.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeImageProcessor::NativeImageProcessor() : ::djinni::JniInterface<::dicekeys::ImageProcessor, NativeImageProcessor>("com/dicekeys/dicekeys/ImageProcessor$CppProxy") {}

NativeImageProcessor::~NativeImageProcessor() = default;


CJNIEXPORT void JNICALL Java_com_dicekeys_dicekeys_ImageProcessor_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::dicekeys::ImageProcessor>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_dicekeys_dicekeys_ImageProcessor_00024CppProxy_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::dicekeys::ImageProcessor::create();
        return ::djinni::release(::djinni_generated::NativeImageProcessor::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dicekeys_dicekeys_ImageProcessor_00024CppProxy_native_1process(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jbyteArray j_image, jint j_width, jint j_height)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dicekeys::ImageProcessor>(nativeRef);
        auto r = ref->process(::djinni::Binary::toCpp(jniEnv, j_image),
                              ::djinni::I32::toCpp(jniEnv, j_width),
                              ::djinni::I32::toCpp(jniEnv, j_height));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jbyteArray JNICALL Java_com_dicekeys_dicekeys_ImageProcessor_00024CppProxy_native_1overlay(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jbyteArray j_image, jint j_width, jint j_height)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dicekeys::ImageProcessor>(nativeRef);
        auto r = ref->overlay(::djinni::Binary::toCpp(jniEnv, j_image),
                              ::djinni::I32::toCpp(jniEnv, j_width),
                              ::djinni::I32::toCpp(jniEnv, j_height));
        return ::djinni::release(::djinni::Binary::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jbyteArray JNICALL Java_com_dicekeys_dicekeys_ImageProcessor_00024CppProxy_native_1augmented(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jbyteArray j_image, jint j_width, jint j_height)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dicekeys::ImageProcessor>(nativeRef);
        auto r = ref->augmented(::djinni::Binary::toCpp(jniEnv, j_image),
                                ::djinni::I32::toCpp(jniEnv, j_width),
                                ::djinni::I32::toCpp(jniEnv, j_height));
        return ::djinni::release(::djinni::Binary::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_dicekeys_dicekeys_ImageProcessor_00024CppProxy_native_1json(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dicekeys::ImageProcessor>(nativeRef);
        auto r = ref->json();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dicekeys_dicekeys_ImageProcessor_00024CppProxy_native_1isFinished(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dicekeys::ImageProcessor>(nativeRef);
        auto r = ref->isFinished();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jbyteArray JNICALL Java_com_dicekeys_dicekeys_ImageProcessor_00024CppProxy_native_1faceImage(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_faceIndex, jint j_height, jbyteArray j_bytes)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dicekeys::ImageProcessor>(nativeRef);
        auto r = ref->faceImage(::djinni::I32::toCpp(jniEnv, j_faceIndex),
                                ::djinni::I32::toCpp(jniEnv, j_height),
                                ::djinni::Binary::toCpp(jniEnv, j_bytes));
        return ::djinni::release(::djinni::Binary::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
