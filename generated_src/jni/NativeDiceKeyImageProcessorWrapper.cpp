// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from DiceKeyImageProcessorWrapper.djinni

#include "NativeDiceKeyImageProcessorWrapper.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeDiceKeyImageProcessorWrapper::NativeDiceKeyImageProcessorWrapper() : ::djinni::JniInterface<::dicekeys::DiceKeyImageProcessorWrapper, NativeDiceKeyImageProcessorWrapper>("com/dicekeys/dicekeys/DiceKeyImageProcessorWrapper$CppProxy") {}

NativeDiceKeyImageProcessorWrapper::~NativeDiceKeyImageProcessorWrapper() = default;


CJNIEXPORT void JNICALL Java_com_dicekeys_dicekeys_DiceKeyImageProcessorWrapper_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::dicekeys::DiceKeyImageProcessorWrapper>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_dicekeys_dicekeys_DiceKeyImageProcessorWrapper_00024CppProxy_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::dicekeys::DiceKeyImageProcessorWrapper::create();
        return ::djinni::release(::djinni_generated::NativeDiceKeyImageProcessorWrapper::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dicekeys_dicekeys_DiceKeyImageProcessorWrapper_00024CppProxy_native_1processRGBAImage(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_width, jint j_height, jbyteArray j_bytes)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dicekeys::DiceKeyImageProcessorWrapper>(nativeRef);
        auto r = ref->processRGBAImage(::djinni::I32::toCpp(jniEnv, j_width),
                                       ::djinni::I32::toCpp(jniEnv, j_height),
                                       ::djinni::Binary::toCpp(jniEnv, j_bytes));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dicekeys_dicekeys_DiceKeyImageProcessorWrapper_00024CppProxy_native_1processRGBAImageAndRenderOverlay(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_width, jint j_height, jbyteArray j_bytes)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dicekeys::DiceKeyImageProcessorWrapper>(nativeRef);
        auto r = ref->processRGBAImageAndRenderOverlay(::djinni::I32::toCpp(jniEnv, j_width),
                                                       ::djinni::I32::toCpp(jniEnv, j_height),
                                                       ::djinni::Binary::toCpp(jniEnv, j_bytes));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dicekeys_dicekeys_DiceKeyImageProcessorWrapper_00024CppProxy_native_1processAndAugmentRGBAImage(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_width, jint j_height, jbyteArray j_bytes)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dicekeys::DiceKeyImageProcessorWrapper>(nativeRef);
        auto r = ref->processAndAugmentRGBAImage(::djinni::I32::toCpp(jniEnv, j_width),
                                                 ::djinni::I32::toCpp(jniEnv, j_height),
                                                 ::djinni::Binary::toCpp(jniEnv, j_bytes));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_dicekeys_dicekeys_DiceKeyImageProcessorWrapper_00024CppProxy_native_1readJson(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dicekeys::DiceKeyImageProcessorWrapper>(nativeRef);
        auto r = ref->readJson();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_dicekeys_dicekeys_DiceKeyImageProcessorWrapper_00024CppProxy_native_1isFinished(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dicekeys::DiceKeyImageProcessorWrapper>(nativeRef);
        auto r = ref->isFinished();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jbyteArray JNICALL Java_com_dicekeys_dicekeys_DiceKeyImageProcessorWrapper_00024CppProxy_native_1getFaceImage(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_faceIndex, jint j_height, jbyteArray j_bytes)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::dicekeys::DiceKeyImageProcessorWrapper>(nativeRef);
        auto r = ref->getFaceImage(::djinni::I32::toCpp(jniEnv, j_faceIndex),
                                   ::djinni::I32::toCpp(jniEnv, j_height),
                                   ::djinni::Binary::toCpp(jniEnv, j_bytes));
        return ::djinni::release(::djinni::Binary::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
