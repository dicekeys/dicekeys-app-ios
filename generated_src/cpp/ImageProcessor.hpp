// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ImageProcessor.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace dicekeys {

class ImageProcessor {
public:
    virtual ~ImageProcessor() {}

    /**
     * `create()` factory method has to be used to create an instance of the class in Swift/Objective-C/Kotlin/Java
     *
     * For example, in Swift:
     * let wrapper = DKImageProcessor.create()!
     *
     * in Objective-C:
     * DKImageProcessor *wrapper = [DKImageProcessor create];
     */
    static std::shared_ptr<ImageProcessor> create();

    virtual bool processRGBAImage(int32_t width, int32_t height, const std::vector<uint8_t> & bytes) = 0;

    virtual std::vector<uint8_t> processRGBAImageAndRenderOverlay(int32_t width, int32_t height, const std::vector<uint8_t> & bytes) = 0;

    virtual std::vector<uint8_t> processAndAugmentRGBAImage(int32_t width, int32_t height, const std::vector<uint8_t> & bytes) = 0;

    virtual std::string readJson() = 0;

    virtual bool isFinished() = 0;

    virtual std::vector<uint8_t> getFaceImage(int32_t faceIndex, int32_t height, const std::vector<uint8_t> & bytes) = 0;
};

}  // namespace dicekeys
