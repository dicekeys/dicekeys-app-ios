// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ImageProcessor.djinni

#import "DKImageProcessor+Private.h"
#import "DKImageProcessor.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface DKImageProcessor ()

- (id)initWithCpp:(const std::shared_ptr<::dicekeys::ImageProcessor>&)cppRef;

@end

@implementation DKImageProcessor {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::dicekeys::ImageProcessor>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::dicekeys::ImageProcessor>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable DKImageProcessor *)create {
    try {
        auto objcpp_result_ = ::dicekeys::ImageProcessor::create();
        return ::djinni_generated::ImageProcessor::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)process:(nonnull NSData *)image
          width:(int32_t)width
         height:(int32_t)height {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->process(::djinni::Binary::toCpp(image),
                                                           ::djinni::I32::toCpp(width),
                                                           ::djinni::I32::toCpp(height));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)overlay:(nonnull NSData *)image
                      width:(int32_t)width
                     height:(int32_t)height {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->overlay(::djinni::Binary::toCpp(image),
                                                           ::djinni::I32::toCpp(width),
                                                           ::djinni::I32::toCpp(height));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)augmented:(nonnull NSData *)image
                        width:(int32_t)width
                       height:(int32_t)height {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->augmented(::djinni::Binary::toCpp(image),
                                                             ::djinni::I32::toCpp(width),
                                                             ::djinni::I32::toCpp(height));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)json {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->json();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isFinished {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isFinished();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)faceImage:(int32_t)faceIndex
                       height:(int32_t)height
                        bytes:(nonnull NSData *)bytes {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->faceImage(::djinni::I32::toCpp(faceIndex),
                                                             ::djinni::I32::toCpp(height),
                                                             ::djinni::Binary::toCpp(bytes));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto ImageProcessor::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto ImageProcessor::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<DKImageProcessor>(cpp);
}

}  // namespace djinni_generated

@end
